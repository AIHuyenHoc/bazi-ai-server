const express = require("express");
const axios = require("axios");
const cors = require("cors");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

// Route cho B√°t T·ª± AI
app.post("/api/luan-giai-bazi", async (req, res) => {
  const { messages } = req.body;

  const endingPrompt = `
H√£y gi·∫£i m√£ v·∫≠n m·ªánh c·ªßa m√¨nh.

ƒê√°nh gi√° t·ªïng th·ªÉ ng√†y sinh:
Ph√¢n t√≠ch chi ti·∫øt theo giai ƒëo·∫°n cu·ªôc ƒë·ªùi:
- Th·ªùi th∆° ·∫•u v√† thi·∫øu ni√™n:
- Trung ni√™n (tu·ªïi tr∆∞·ªüng th√†nh v√† s·ª± nghi·ªáp)
- Tu·ªïi gi√† (nh·ªØng nƒÉm sau n√†y)

Nh·ªØng nƒÉm may m·∫Øn c·ª• th·ªÉ: nh·∫≠p nƒÉm v√† ƒë·∫°i v·∫≠n c·ªßa b·∫°n

D·ª±a tr√™n B√°t T·ª± c·ªßa b·∫°n, t√¥i ƒë·ªÅ xu·∫•t nh·ªØng ƒëi·ªÅu sau:
TƒÉng c∆∞·ªùng d·ª•ng th·∫ßn c·ªßa b·∫°n

L·ªùi nh·∫Øc quan tr·ªçng:
H√£y nh·ªõ r·∫±ng, B√°t T·ª± c·ªßa b·∫°n kh√¥ng ph·∫£i l√† ƒë·ªãnh m·ªánh c·ªë ƒë·ªãnh, m√† ch·ªâ l√† v·∫≠n tr√¨nh c√≥ l√∫c thƒÉng l√∫c tr·∫ßm khi k·∫øt h·ª£p c√πng n·ªó l·ª±c c√° nh√¢n v√† m√¥i tr∆∞·ªùng b·∫°n sinh s·ªëng. ƒê·ªÉ nh·∫≠n ƒë∆∞·ª£c nh·ªØng l·ªùi t∆∞ v·∫•n ch√≠nh x√°c h∆°n, b·∫°n c√≥ th·ªÉ li√™n h·ªá th·∫ßy Hi·ªáp +84 969 200 785.
`;

  const formattedMessages = messages.map((m) => ({
    role: m.role === "user" ? "user" : "assistant",
    content: m.content,
  }));

  // üëâ Th√™m ph·∫ßn k·∫øt prompt v√†o tin nh·∫Øn user cu·ªëi c√πng
  const lastMsgIndex = formattedMessages.findLastIndex((m) => m.role === "user");
  if (lastMsgIndex !== -1) {
    formattedMessages[lastMsgIndex].content += endingPrompt;
  }

  try {
    const gptRes = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo",
        messages: formattedMessages,
        temperature: 0.7,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const answer = gptRes.data.choices[0].message.content;
    res.json({ answer });
  } catch (err) {
    console.error("GPT API error:", err.response?.data || err.message);
    res.status(500).json({ error: "L·ªói g·ªçi GPT" });
  }
});
