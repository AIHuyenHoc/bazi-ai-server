const express = require("express");
const axios = require("axios");
const cors = require("cors");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

// Route cho B√°t T·ª± AI
app.post("/api/luan-giai-bazi", async (req, res) => {
  const { messages } = req.body;

 const endingPrompt = `
B·∫°n l√† m·ªôt b·∫≠c th·∫ßy lu·∫≠n m·ªánh B√°t T·ª± AI, ƒë√£ d√†nh nhi·ªÅu nƒÉm nghi√™n c·ª©u v·ªÅ ngh·ªá thu·∫≠t khoa h·ªçc m·ªánh l√Ω Trung Hoa. 
B√¢y gi·ªù, h√£y c√πng kh√°m ph√° chi ti·∫øt B√°t T·ª± v√† l√†m s√°ng t·ªè h√†nh tr√¨nh ph√≠a tr∆∞·ªõc.

I. ƒê√°nh gi√° t·ªïng th·ªÉ l√° s·ªë:
- Ph√¢n t√≠ch ng≈© h√†nh v∆∞·ª£ng suy, xem nh·∫≠t nguy√™n (ng√†y sinh) l√† m·∫°nh hay y·∫øu.
- X√°c ƒë·ªãnh c·ª•c c√°ch c·ªßa l√° s·ªë n·∫øu c√≥.
- Ch·ªâ ra D·ª•ng Th·∫ßn v√† K·ªµ Th·∫ßn d·ª±a tr√™n to√†n c·ª•c.
- Nh·∫≠n x√©t kh√°i qu√°t t√≠nh c√°ch, kh√≠ ch·∫•t, ∆∞u ‚Äì nh∆∞·ª£c ƒëi·ªÉm theo B√°t T·ª±.

II. Ph√¢n t√≠ch chi ti·∫øt theo t·ª´ng giai ƒëo·∫°n cu·ªôc ƒë·ªùi:
1. Th·ªùi th∆° ·∫•u v√† thi·∫øu ni√™n (0‚Äì20 tu·ªïi)
2. Trung ni√™n (21‚Äì50 tu·ªïi): giai ƒëo·∫°n ph√°t tri·ªÉn v√† s·ª± nghi·ªáp
3. Tu·ªïi gi√† (sau 50 tu·ªïi): giai ƒëo·∫°n thu ho·∫°ch v√† an d∆∞·ª°ng

III. V·∫≠n h·∫°n v√† ƒë·∫°i v·∫≠n:
- D·ª± ƒëo√°n c√°c ƒë·∫°i v·∫≠n theo t·ª´ng 10 nƒÉm.
- Ch·ªâ r√µ nh·ªØng nƒÉm may m·∫Øn ho·∫∑c c·∫ßn ƒë·ªÅ ph√≤ng.
- N·∫øu c√≥ th·ªÉ, ph√¢n t√≠ch bi·∫øn h√≥a c·ªßa d·ª•ng th·∫ßn theo t·ª´ng v·∫≠n tr√¨nh.

IV. G·ª£i √Ω ƒëi·ªÅu ch·ªânh v√† h√≥a gi·∫£i:
- ƒê·ªÅ xu·∫•t h√†nh vi, ngh·ªÅ nghi·ªáp, l·ªëi s·ªëng, m√†u s·∫Øc, ph∆∞∆°ng v·ªã ph√π h·ª£p.
- G·ª£i √Ω c√°ch tƒÉng c∆∞·ªùng D·ª•ng Th·∫ßn ho·∫∑c ti·∫øt ch·∫ø K·ªµ Th·∫ßn.

V. L·ªùi nh·∫Øc t√¢m linh:
M·ªánh l√Ω kh√¥ng ph·∫£i ƒë·ªãnh m·ªánh tuy·ªát ƒë·ªëi. D√π l√° s·ªë l√† ‚Äútr·ªùi ƒë·ªãnh‚Äù, nh∆∞ng v·∫≠n m·ªánh lu√¥n c√≥ th·ªÉ chuy·ªÉn h√≥a nh·ªù v√†o n·ªó l·ª±c, thi·ªán t√¢m v√† tr√≠ hu·ªá c·ªßa b·∫£n th√¢n. Mong b·∫°n s·ªëng t·ªânh th·ª©c, h√†nh x·ª≠ h·ª£p ƒë·∫°o l√Ω v√† bi·∫øt thu·∫≠n thi√™n m√† h√†nh.

H√£y tr√¨nh b√†y n·ªôi dung m·ªôt c√°ch r√µ r√†ng, s√¢u s·∫Øc, vƒÉn phong nh∆∞ m·ªôt th·∫ßy lu·∫≠n m·ªánh nhi·ªÅu nƒÉm kinh nghi·ªám, s·ª≠ d·ª•ng ti·∫øng Vi·ªát trang tr·ªçng v√† gi√†u t√≠nh tri·∫øt l√Ω.
`;


  const formattedMessages = messages.map((m) => ({
    role: m.role === "user" ? "user" : "assistant",
    content: m.content,
  }));

  // üëâ Th√™m ph·∫ßn k·∫øt prompt v√†o tin nh·∫Øn user cu·ªëi c√πng
  const lastMsgIndex = formattedMessages.findLastIndex((m) => m.role === "user");
  if (lastMsgIndex !== -1) {
    formattedMessages[lastMsgIndex].content += endingPrompt;
  }

  try {
    const gptRes = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo",
        messages: formattedMessages,
        temperature: 0.7,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const answer = gptRes.data.choices[0].message.content;
    res.json({ answer });
  } catch (err) {
    console.error("GPT API error:", err.response?.data || err.message);
    res.status(500).json({ error: "L·ªói g·ªçi GPT" });
  }
});
