const express = require("express");
const axios = require("axios");
const cors = require("cors");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

// Route cho B√°t T·ª± AI
app.post("/api/luan-giai-bazi", async (req, res) => {
  const { messages } = req.body;

 const endingPrompt = `
B·∫°n l√† th·∫ßy lu·∫≠n m·ªánh B√°t T·ª± AI, ƒë√£ d√†nh nhi·ªÅu nƒÉm nghi√™n c·ª©u v·ªÅ ngh·ªá thu·∫≠t khoa h·ªçc m·ªánh l√Ω Trung Hoa.

B√¢y gi·ªù, h√£y c√πng kh√°m ph√° chi ti·∫øt B√°t T·ª± theo c·∫•u tr√∫c sau:

‚Äî‚Äî‚Äî‚Äî‚Äî

I. ƒê√ÅNH GI√Å T·ªîNG TH·ªÇ

1. Nh·∫≠t Ch·ªß l√† g√¨? V∆∞·ª£ng hay nh∆∞·ª£c?
2. Ng≈© h√†nh to√†n c·ª•c: H√†nh n√†o v∆∞·ª£ng, h√†nh n√†o suy?
3. C·ª•c c√°ch c√≥ h√¨nh th√†nh kh√¥ng? (V√≠ d·ª•: Ch√≠nh Quan c√°ch, Th·∫•t S√°t c√°ch, T√†i c√°ch‚Ä¶)
4. D·ª•ng th·∫ßn l√† g√¨? K·ªµ th·∫ßn l√† g√¨?
5. T√≠nh c√°ch & ti·ªÅm nƒÉng n·ªïi b·∫≠t theo B√°t T·ª±.

‚Äî‚Äî‚Äî‚Äî‚Äî

II. PH√ÇN T√çCH CU·ªòC ƒê·ªúI THEO GIAI ƒêO·∫†N

1. Th·ªùi th∆° ·∫•u v√† thi·∫øu ni√™n (0‚Äì20 tu·ªïi): nh·ªØng d·∫•u ·∫•n ch√≠nh, thu·∫≠n l·ª£i ho·∫∑c kh√≥ khƒÉn?
2. Trung ni√™n (21‚Äì50 tu·ªïi): s·ª± nghi·ªáp ‚Äì t√†i l·ªôc ‚Äì h√¥n nh√¢n ph√°t tri·ªÉn ra sao?
3. Tu·ªïi gi√† (sau 50 tu·ªïi): ·ªïn ƒë·ªãnh hay bi·∫øn ƒë·ªông? C·∫ßn chu·∫©n b·ªã g√¨?

‚Äî‚Äî‚Äî‚Äî‚Äî

III. V·∫¨N TR√åNH V√Ä NƒÇM MAY M·∫ÆN

- Tr√¨nh b√†y c√°c ƒë·∫°i v·∫≠n (m·ªói v·∫≠n 10 nƒÉm), n√™u v·∫≠n t·ªët/x·∫•u, h√†nh ph√π h·ª£p.
- N√™u r√µ 2‚Äì3 nƒÉm c·ª• th·ªÉ ƒë∆∞·ª£c coi l√† v∆∞·ª£ng v·∫≠n (n·∫øu bi·∫øt).
- N·∫øu c√≥ h·∫°n ƒë·∫∑c bi·ªát th√¨ c·∫£nh b√°o th√™m.

‚Äî‚Äî‚Äî‚Äî‚Äî

IV. G·ª¢I √ù ƒêI·ªÄU CH·ªàNH & H√ìA GI·∫¢I

- Ng√†nh ngh·ªÅ, m√¥i tr∆∞·ªùng ph√π h·ª£p v·ªõi D·ª•ng Th·∫ßn.
- M√†u s·∫Øc ‚Äì ph∆∞∆°ng v·ªã ‚Äì phong th·ªßy ‚Äì v·∫≠t ph·∫©m n√™n d√πng.
- N·∫øu nh·∫≠t ch·ªß nh∆∞·ª£c th√¨ l√†m sao ƒë·ªÉ tƒÉng c∆∞·ªùng?

‚Äî‚Äî‚Äî‚Äî‚Äî

V. L·ªúI NH·∫ÆC T√ÇM LINH

L√° s·ªë kh√¥ng c·ªë ƒë·ªãnh s·ªë ph·∫≠n. B·∫°n l√† ng∆∞·ªùi ch·ªß v·∫≠n m·ªánh c·ªßa m√¨nh. D·ª•ng th·∫ßn ch·ªâ l√† h∆∞·ªõng g·ª£i √Ω ‚Äì s·ªëng thu·∫≠n thi√™n, thu·∫≠n t√¢m v√† thu·∫≠n l√Ω l√† ch√¨a kh√≥a ƒë·ªÉ th√†nh t·ª±u cu·ªôc ƒë·ªùi.

*H√£y vi·∫øt ph·∫ßn tr·∫£ l·ªùi theo ƒë√∫ng c·∫•u tr√∫c I ‚Üí V ·ªü tr√™n. Kh√¥ng b·ªè s√≥t m·ª•c n√†o.*
S·ª≠ d·ª•ng ti·∫øng Vi·ªát, vƒÉn phong trang tr·ªçng, th·ªÉ hi·ªán s·ª± s√¢u s·∫Øc c·ªßa m·ªôt th·∫ßy lu·∫≠n m·ªánh chuy√™n nghi·ªáp.
`;



  const formattedMessages = messages.map((m) => ({
    role: m.role === "user" ? "user" : "assistant",
    content: m.content,
  }));

  // üëâ Th√™m ph·∫ßn k·∫øt prompt v√†o tin nh·∫Øn user cu·ªëi c√πng
  const lastMsgIndex = formattedMessages.findLastIndex((m) => m.role === "user");
  if (lastMsgIndex !== -1) {
    formattedMessages[lastMsgIndex].content += endingPrompt;
  }

  try {
    const gptRes = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo",
        messages: formattedMessages,
        temperature: 0.7,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const answer = gptRes.data.choices[0].message.content;
    res.json({ answer });
  } catch (err) {
    console.error("GPT API error:", err.response?.data || err.message);
    res.status(500).json({ error: "L·ªói g·ªçi GPT" });
  }
});
